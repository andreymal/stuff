#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# pylint: disable=too-many-instance-attributes

import os
import sys
import json
import time
import shlex
import shutil
import argparse
import traceback
from threading import Event
from subprocess import Popen, PIPE, DEVNULL
from urllib.request import Request, urlopen
from urllib.parse import quote


__version__ = '0.0.2'


# Трек


class TrackInfo:
    def __init__(self, artist, title, src=None, image_path=None, extra=None):
        self.artist = str(artist or '')
        self.title = str(title or '')
        self.src = str(src) if src else None
        self.image_path = str(image_path) if image_path else None
        self.extra = dict(extra) if extra else {}

    def get_extra(self, key, default=None):
        return self.extra.get(key, default)

    def set_extra(self, key, value):
        self.extra[key] = value

    def same_track(self, other):
        if not isinstance(other, TrackInfo):
            return False
        return other.artist == self.artist and other.title == self.title

    def copy(self):
        return TrackInfo(
            artist=self.artist,
            title=self.title,
            src=self.src,
            image_path=self.image_path,
            extra=self.extra,  # copied by constructor
        )


# Инпуты


class TuneInput:
    priority = 50

    def __init__(self, **kwargs):
        self._last = None

    def grab(self, amtune):
        return None

    def get_last(self, amtune):
        return self._last.copy() if self._last is not None else None

    def get_cached_track(self, amtune):
        return None


class DeadbeefInput(TuneInput):
    priority = 40

    def __init__(self, deadbeef_cmd='deadbeef'):
        super().__init__()
        self.deadbeef_cmd = deadbeef_cmd
        self.deadbeef_args = shlex.split(self.deadbeef_cmd)
        self.deadbeef_args[0] = shutil.which(self.deadbeef_args[0]) or self.deadbeef_args[0]

    def grab(self, amtune):
        player = Popen(self.deadbeef_args + [
            '--nowplaying-tf',
            '%artist% :::::::: %title%',
        ], stdin=DEVNULL, stdout=PIPE, stderr=DEVNULL)
        data = player.communicate()[0].decode('utf-8').strip()
        if not data or data.count(' :::::::: ') != 1:
            self._last = None
            return None

        artist, title = data.split(' :::::::: ', 1)
        if not artist.strip() or not title.strip():
            self._last = None
            return None

        self._last = TrackInfo(
            artist.strip(),
            title.strip(),
            src='deadbeef',
        )

        return self._last.copy()


class LastfmInput(TuneInput):
    def __init__(self, username, cache_timeout=120):
        import lxml.html  # pylint: disable=unused-variable; just test requirements
        super().__init__()
        self.username = username
        self.cache_timeout = max(0.0, float(cache_timeout))
        self._cache = None

    def grab(self, amtune):
        import lxml.html
        import lxml.etree

        bindata = amtune.download(
            'https://www.last.fm/user/{}/partial/recenttracks?ajax=1'.format(quote(self.username)),
            {'Referer': 'https://www.last.fm/user/{}'.format(quote(self.username))}
        )

        data = bindata.decode('utf-8', 'replace')

        node = lxml.html.fragments_fromstring(data)[0]
        now = node.xpath('//tr[contains(@class, "now-scrobbling")]')
        if not now:
            self._last = None
            return None

        now = now[0]

        # <a> — ссылка на трек есть
        # <span> — ссылки на трек нет
        # Не знаю, почему иногда не бывает ссылок

        artist = now.xpath('td[contains(@class, "chartlist-name")]/span/span[contains(@class, "chartlist-artists")]/a')
        if not artist:
            artist = now.xpath('td[contains(@class, "chartlist-name")]/span/span[contains(@class, "chartlist-artists")]/span')
        title = now.xpath('td[contains(@class, "chartlist-name")]/span/a')
        if not title:
            title = now.xpath('td[contains(@class, "chartlist-name")]/span/span[contains(@class, "link-block-target")]')

        youtube = now.xpath('td[contains(@class, "chartlist-play")]/a')
        youtube = youtube[0].get('data-youtube-id') if youtube else None

        self._last = TrackInfo(
            artist[0].text.strip(),
            title[0].text.strip(),
            src='lastfm',
            extra={'youtube': youtube},
        )
        self._cache = (time.time(), self._last.copy())
        return self._last.copy()

    def get_cached_track(self, amtune):
        if not self._cache or time.time() - self._cache[0] > self.cache_timeout:
            self._cache = None
            return None
        return self._cache[1].copy()


# Дополнительные обработчики


class TuneProcessor:
    priority = 50

    def __init__(self, **kwargs):
        pass

    def process(self, amtune, track):
        return None


class YouTubeProcessor(TuneProcessor):
    def __init__(self, saving_image_path=None):
        super().__init__()
        self.saving_image_path = saving_image_path

    def process(self, amtune, track):
        if not self.saving_image_path or not track.get_extra('youtube'):
            return None

        # Если есть ютуб у ластфма, то в качестве иконки для уведомляшки берём картинку оттуда
        image_url = 'https://i.ytimg.com/vi/{}/mqdefault.jpg'.format(track.get_extra('youtube'))
        image_data = None
        for _ in range(3):
            try:
                image_data = amtune.download(image_url)
                break
            except IOError:
                time.sleep(0.3)

        if image_data:
            with open(self.saving_image_path, 'wb') as fp:
                fp.write(image_data)
            image_path = self.saving_image_path
        else:
            image_path = None

        new_track = None
        if image_path:
            new_track = track.copy()
            new_track.image_path = image_path
        return new_track


# Оутпуты


class TuneOutput:
    priority = 50

    def __init__(self, **kwargs):
        pass

    def write(self, amtune, track):
        pass


class FileOutput(TuneOutput):
    def __init__(self, path, data, emptydata='', imgdata=None, default_image_path=None, encoding='utf-8', ignoresrc=None, ignored_as_empty=False):
        super().__init__()
        self.path = path
        self.data = data
        self.emptydata = emptydata
        self.imgdata = imgdata
        self.default_image_path = default_image_path
        self.encoding = encoding
        self.ignoresrc = ignoresrc or []
        self.ignored_as_empty = ignored_as_empty

    def write(self, amtune, track):
        if track and track.src in self.ignoresrc:
            if not self.ignored_as_empty:
                return
            track = None

        kwargs = {}

        # Собираем инфу
        if track:
            kwargs['artist'] = track.artist
            kwargs['title'] = track.title

            image_path = track.image_path or self.default_image_path
            if image_path and self.imgdata is not None:
                datafmt = self.imgdata
                kwargs['image_path'] = image_path
            else:
                datafmt = self.data

        else:
            datafmt = self.emptydata

        if datafmt is None:
            return

        # Экранируем
        for k, v in list(kwargs.items()):
            kwargs[k + '_eschtml'] = esc_html(v)
            kwargs[k + '_esccmd'] = esc_cmd(v)
            kwargs[k + '_esccmdhtml'] = esc_cmd(esc_html(v))  # Нужно для notify-send

        data = datafmt.format(**kwargs)

        with open(self.path, 'w', encoding=self.encoding) as fp:
            fp.write(data)


class CommandOutput(TuneOutput):
    def __init__(self, cmd, emptycmd='', imgcmd=None, default_image_path=None, ignoresrc=None, ignored_as_empty=False):
        super().__init__()
        self.cmd = cmd
        self.emptycmd = emptycmd
        self.imgcmd = imgcmd
        self.default_image_path = default_image_path
        self.ignoresrc = ignoresrc or []
        self.ignored_as_empty = ignored_as_empty

    def write(self, amtune, track):
        if track and track.src in self.ignoresrc:
            if not self.ignored_as_empty:
                return
            track = None

        kwargs = {}

        # Собираем инфу
        if track:
            kwargs['artist'] = track.artist
            kwargs['title'] = track.title

            image_path = track.image_path or self.default_image_path
            if image_path and self.imgcmd is not None:
                datafmt = self.imgcmd
                kwargs['image_path'] = image_path
            else:
                datafmt = self.cmd

        else:
            datafmt = self.emptycmd

        if datafmt is None:
            return

        # Экранируем
        for k, v in list(kwargs.items()):
            kwargs[k + '_eschtml'] = esc_html(v)
            kwargs[k + '_esccmd'] = esc_cmd(v)
            kwargs[k + '_esccmdhtml'] = esc_cmd(esc_html(v))  # Нужно для notify-send

        # Готовим команду для выполнения
        cmd = datafmt.format(**kwargs)

        # И выполняем
        if cmd and cmd.strip():
            os.system(cmd)


# Основной класс


class AMTune:
    inputs_registry = {
        'deadbeef': DeadbeefInput,
        'lastfm': LastfmInput,
    }

    processors_registry = {
        'youtube': YouTubeProcessor,
    }

    outputs_registry = {
        'file': FileOutput,
        'command': CommandOutput,
    }

    default_headers = {
        'Accept': '*/*',
        'Accept-Language': 'ru,en-US;q=0.8,en;q=0.5,de;q=0.3',
        'Connection': 'close',
        'User-Agent': 'amtune/{}'.format(__version__),
    }

    def __init__(self, verbosity=0):
        self.inputs = []
        self.processors = []
        self.outputs = []

        self.interval = 15.0
        self.interval_offset = 0.05
        self.download_timeout = 15.0
        self.user_agent = None

        self.last_track = None
        self.verbosity = int(verbosity)

        self.quit_event = Event()

        self._listeners = {
            'start': [],          # (amtune: AMTune)
            'input_start': [],    # (amtune: AMTune)
            'input': [],          # (amtune: AMTune, track: Optional[TrackInfo], inp: TuneInput, get_cached: bool)
            'input_end': [],      # (amtune: AMTune, track: Optional[TrackInfo])
            'process_start': [],  # (amtune: AMTune, track: TrackInfo)
            'process': [],        # (amtune: AMTune, track: TrackInfo, proc: TuneProcessor)
            'process_end': [],    # (amtune: AMTune, track: TrackInfo)
            'output_start': [],   # (amtune: AMTune, track: Optional[TrackInfo])
            'output': [],         # (amtune: AMTune, track: Optional[TrackInfo], out: TuneOutput)
            'output_end': [],     # (amtune: AMTune, track: Optional[TrackInfo])
            'done': [],           # (amtune: AMTune, exc: Optional[Exception])
        }

    def subscribe(self, name, listener):
        if name not in self._listeners:
            raise ValueError('Unknown event type: {!r}'.format(name))
        if listener not in self._listeners[name]:
            self._listeners[name].append(listener)

    def unsubscribe(self, name, listener):
        if name not in self._listeners:
            raise ValueError('Unknown event type: {!r}'.format(name))
        if listener in self._listeners[name]:
            self._listeners[name].remove(listener)

    def _call(
        self, name, args=None, kwargs=None
    ):
        args = args or ()
        kwargs = kwargs or {}
        for listener in self._listeners[name]:
            listener(*args, **kwargs)

    def apply_config(self, config):
        if 'interval' in config:
            self.interval = float(config['interval'])

        if 'interval_offset' in config:
            self.interval_offset = float(config['interval_offset'])

        if 'download_timeout' in config:
            self.download_timeout = float(config['download_timeout'])

        if 'user_agent' in config:
            self.user_agent = str(config['user_agent']) if config['user_agent'] else None

        # Запускаем инпуты
        if not config['inputs']:
            raise ValueError('inputs are not set')

        for typ, kwargs in config['inputs'].items():
            if typ not in self.inputs_registry:
                raise ValueError('Unknown input: {!r}'.format(typ))
            inp = self.inputs_registry[typ](**kwargs)
            self.add_input(inp)

        self.sort_inputs()

        # Запускаем дополнительные обработчики
        if config['processors']:
            for typ, kwargs in config['processors'].items():
                if typ not in self.processors_registry:
                    raise ValueError('Unknown processor: {!r}'.format(typ))
                proc = self.processors_registry[typ](**kwargs)
                self.add_processor(proc)

        self.sort_processors()

        # Запускаем оутпуты
        if not config['outputs']:
            raise ValueError('outputs are not set')

        outputs_cfg = config['outputs']
        if isinstance(outputs_cfg, dict):
            outputs_cfg = [(k, v) for k, v in outputs_cfg.items()]

        for typ, kwargs in outputs_cfg:
            if typ not in self.outputs_registry:
                raise ValueError('Unknown output: {!r}'.format(typ))
            out = self.outputs_registry[typ](**kwargs)
            self.add_output(out)

        self.sort_outputs()

    def read_config_file(self, path):
        with open(path, 'r', encoding='utf-8-sig') as fp:
            config = json.load(fp)
        if not isinstance(config, dict):
            raise TypeError('Config must be dict')
        self.apply_config(config)

    @classmethod
    def register_input(cls, name, inp, force=False):
        if not force and name in cls.inputs_registry:
            raise ValueError('Input {!r} is already registered')
        cls.inputs_registry[name] = inp

    def add_input(self, inp):
        if inp not in self.inputs:
            self.inputs.append(inp)

    def sort_inputs(self):
        self.inputs.sort(key=lambda x: x.priority)

    @classmethod
    def register_processor(cls, name, proc, force=False):
        if not force and name in cls.processors_registry:
            raise ValueError('Processor {!r} is already registered')
        cls.processors_registry[name] = proc

    def add_processor(self, proc):
        if proc not in self.processors:
            self.processors.append(proc)

    def sort_processors(self):
        self.processors.sort(key=lambda x: x.priority)

    @classmethod
    def register_output(cls, name, out, force=False):
        if not force and name in cls.outputs_registry:
            raise ValueError('Output {!r} is already registered')
        cls.outputs_registry[name] = out

    def add_output(self, out):
        if out not in self.outputs:
            self.outputs.append(out)

    def sort_outputs(self):
        self.outputs.sort(key=lambda x: x.priority)

    def _process(self):
        if self.verbosity > 0:
            print('[{}]'.format(time.strftime('%Y-%m-%d %H:%M:%S')), end=' ', flush=True)

        # Берём трек из первого инпута, который имеется
        self._call('input_start', (self,))
        track = None
        for inp in self.inputs:
            self._call('input', (self, track, inp, False))
            track = inp.grab(self)
            if track:
                break

        # Если нет ничего, берём кэш, например, ластфма, чтобы показать хоть что-то
        if not track:
            for inp in self.inputs:
                self._call('input', (self, track, inp, True))
                track = inp.get_cached_track(self)
                if track:
                    break

        if track and (not track.artist or not track.title):
            track = None

        self._call('input_end', (self, track))

        # Печатаем дебаг в консоль
        if self.verbosity > 0:
            if track:
                print('{} - {}'.format(track.artist, track.title), end='', flush=True)
            else:
                print('[nothing]', end='', flush=True)

        # Трек не изменился — ничего не делаем
        if same_track(track, self.last_track):
            if self.verbosity > 0:
                print('', flush=True)
            return

        if track:
            # Запускаем дополнительные обработчики, которые добавят какую-нибудь
            # полезноту типа картинки с ютуба
            self._call('process_start', (self, track))
            for proc in self.processors:
                self._call('process', (self, track, proc))
                track = proc.process(self, track.copy()) or track
            self._call('process_end', (self, track))

        # Оутпутим
        self._call('output_start', (self, track))
        for out in self.outputs:
            self._call('output', (self, track, out))
            out.write(self, track.copy() if track else None)
        self._call('output_end', (self, track))

        self.last_track = track

        if self.verbosity > 0:
            print('', flush=True)

    def process(self):
        try:
            self._call('start', (self,))
            self._process()
        except Exception as exc:
            self._call('done', (self, exc))
            raise
        else:
            self._call('done', (self, None))

    def stop(self):
        self.quit_event.set()

    def run(self):
        # Проверяем корректность интервала между проверками
        assert self.interval > 0.0

        # И запускаем основной рабочий цикл
        tm = (time.time() // self.interval) * self.interval + self.interval_offset

        while not self.quit_event.is_set():
            try:
                self.process()
            except Exception:
                traceback.print_exc()

            while tm <= time.time():
                tm += self.interval

            sleep_tm = tm - time.time()
            if sleep_tm > 0:
                self.quit_event.wait(sleep_tm)

    def download(self, req, headers=None):
        if isinstance(req, str):
            req = Request(req)

        ready_headers = self.default_headers.copy()
        if self.user_agent:
            ready_headers['User-Agent'] = self.user_agent
        if headers:
            ready_headers.update(headers)
        for k, v in ready_headers.items():
            req.add_header(k, v)

        return urlopen(req, timeout=self.download_timeout).read()


class AMTuneUI:
    appid = 'amtune'
    icons = {
        # TODO: расхардкодить бы
        'idle': os.path.join(os.path.dirname(__file__), 'amtune-idle.svg'),
        'active': os.path.join(os.path.dirname(__file__), 'amtune-active.svg'),
        'error': os.path.join(os.path.dirname(__file__), 'amtune-error.svg'),
    }

    def __init__(self, amtune, use_appindicator=True):
        import gi
        gi.require_version('Gtk', '3.0')
        from gi.repository import Gtk

        self._use_appindicator = use_appindicator

        if self._use_appindicator:
            try:
                gi.require_version('AppIndicator3', '0.1')
                from gi.repository import AppIndicator3
            except Exception:
                self._use_appindicator = False

        self._item_track = Gtk.MenuItem(label='[nothing]')
        self._item_track.set_sensitive(False)

        self._item_about = Gtk.MenuItem(label='About')
        self._item_about.connect('activate', self._gtk_show_about)

        self._item_quit = Gtk.MenuItem(label='Quit')
        self._item_quit.connect('activate', self._gtk_stop)

        self._menu = Gtk.Menu()
        self._menu.append(self._item_track)
        self._menu.append(self._item_about)
        self._menu.append(self._item_quit)
        self._menu.show_all()

        if self._use_appindicator:
            from gi.repository import AppIndicator3
            self._appind = AppIndicator3.Indicator.new(
                self.appid,
                self.icons['idle'],
                AppIndicator3.IndicatorCategory.APPLICATION_STATUS
            )
            self._appind.set_status(AppIndicator3.IndicatorStatus.ACTIVE)
            self._appind.set_menu(self._menu)
        else:
            self._ind = Gtk.StatusIcon()
            self._ind.set_from_file(self.icons['idle'])
            self._ind.connect('popup-menu', self._gtk_popup)

        self._about = None

        self._amtune = amtune
        self._last_exc = None
        self._last_track = None

        self._ondone_bind = self._ondone
        assert self._ondone_bind
        amtune.subscribe('done', self._ondone_bind)

    def destroy(self):
        self._amtune.unsubscribe('done', self._ondone_bind)

        self._ondone_bind = None
        self._amtune = None

        self._menu = None
        self._item_track = None
        self._item_about = None
        self._item_quit = None
        self._about = None
        self._appind = None
        self._ind = None

    def main(self):
        from gi.repository import Gtk
        Gtk.main()

    def _ondone(self, amtune, exc):
        from gi.repository import GLib
        assert amtune is self._amtune
        GLib.idle_add(self._gtk_update, self._amtune.last_track, exc)

    def _gtk_update(self, last_track, exc):
        try:
            if exc:
                self._last_exc = exc
                self.set_tray_track_label('[error]')
                self.set_tray_icon('error')

            elif self._last_exc or not same_track(self._last_track, last_track):
                self._last_exc = None
                if last_track:
                    self.set_tray_track_label('{} – {}'.format(last_track.artist, last_track.title))
                    self.set_tray_icon('active')
                else:
                    self.set_tray_track_label('[nothing]')
                    self.set_tray_icon('idle')

            self._last_track = last_track
        except Exception:
            traceback.print_exc()

    def _gtk_show_about(self, source):
        from gi.repository import Gtk

        if self._about:
            self._about.destroy()
            self._about = None

        self._about = Gtk.AboutDialog()
        self._about.set_program_name('amtune')
        self._about.set_version(__version__)
        self._about.set_logo_icon_name(None)
        self._about.set_authors(['andreymal'])
        self._about.set_copyright('© 2019 andreymal')
        self._about.set_website('https://github.com/andreymal/stuff/tree/master/amtune')
        self._about.set_license_type(Gtk.License.MIT_X11)
        self._about.connect('response', lambda *args: self._about.hide())

        self._about.show()

    def _gtk_popup(self, icon, button, tm):
        from gi.repository import Gtk
        self._menu.popup(None, None, Gtk.StatusIcon.position_menu, icon, button, tm)

    def _gtk_stop(self, source):
        from gi.repository import Gtk
        Gtk.main_quit()

    def set_tray_icon(self, icon_name):
        if icon_name not in self.icons:
            return False
        if self._appind:
            self._appind.set_icon(self.icons[icon_name])
            return True
        if self._ind:
            self._ind.set_from_file(self.icons[icon_name])
            return True
        return False

    def set_tray_track_label(self, label):
        self._item_track.set_label(label)


class AMTuneGTK(AMTune):
    def run(self):
        from threading import Thread

        ui = AMTuneUI(self)

        worker = Thread(target=super().run)
        worker.start()

        try:
            ui.main()
        finally:
            self.stop()
            ui.destroy()


# Утилиты


def same_track(info1, info2):
    '''Сравнивает artist и title у этих двух словарей. Возвращает True, если
    совпадают. В отличие от TrackInfo.same_track(), может принимать оба None.
    '''

    if not info1:
        return bool(info1) == bool(info2)
    return info1.same_track(info2)


def esc_cmd(s):
    # Кавычек в начале и в конце нет, использовать примерно так:
    # "'{}'".format(esc_cmd(foo))
    return s.replace("'", "'\"'\"'").replace('\n', ' ')


def esc_html(s):
    return s.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;').replace('"', '&quot;')


# Запускалка


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-c', '--config', default=os.path.expanduser('~/.config/amtune'), help='Path to configuration file (default ~/.config/amtune)')
    parser.add_argument("-v", "--verbosity", action="count", help="verbose output", default=0)
    parser.add_argument('--gtk', default=False, action='store_true', help='show gtk tray icon')
    args = parser.parse_args()

    amtune = None

    if args.gtk:
        amtune = AMTuneGTK(verbosity=args.verbosity)
    else:
        amtune = AMTune(verbosity=args.verbosity)
    amtune.read_config_file(args.config)

    try:
        amtune.run()
    except (KeyboardInterrupt, SystemExit):
        print()

    return 0


if __name__ == '__main__':
    sys.exit(main())
